# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Console Application

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_notes:
        description: 'Release notes'
        required: false
        default: 'New release'

jobs:

  build-and-release:

    runs-on: windows-latest

    env:
      Solution_Name: LogicAppAdvancedTool.sln
      Project_Path: LogicAppAdvancedTool.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application
    - name: Restore the application
      run: dotnet restore $env:Solution_Name

    # Publish the application as a single file executable
    - name: Publish application
      run: dotnet publish $env:Project_Path -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true -o ./publish

    # Create a zip file with the published executable
    - name: Create release archive
      run: |
        Compress-Archive -Path ./publish/* -DestinationPath ./LogicAppAdvancedTool-${{ github.event.inputs.release_version }}-win-x64.zip

    # Create GitHub Release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.release_version }}
        release_name: Release ${{ github.event.inputs.release_version }}
        body: ${{ github.event.inputs.release_notes }}
        draft: false
        prerelease: false

    # Upload Release Asset
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./LogicAppAdvancedTool-${{ github.event.inputs.release_version }}-win-x64.zip
        asset_name: LogicAppAdvancedTool-${{ github.event.inputs.release_version }}-win-x64.zip
        asset_content_type: application/zip

    # Upload the published executable as build artifact (optional)
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Published-Executable-${{ github.event.inputs.release_version }}
        path: ./publish
